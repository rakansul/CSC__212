package CSC_227;

import java.util.Map;
import java.util.Scanner;

/**
 * Main application class for the OS Scheduler Simulation
 */
public class OSMain {
    public static void main(String[] args) {
        System.out.println("OS Scheduler Simulation");
        
        // Create memory manager
        MemoryManager memoryManager = new MemoryManager();
        
        // Ask for input file
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the path to job.txt: ");
        String filename = scanner.nextLine().trim();
        
        // Start file reader thread
        FileReaderThread fileReaderThread = new FileReaderThread(filename);
        fileReaderThread.start();
        
        try {
            // Wait for file reading to complete
            fileReaderThread.join();
        } catch (InterruptedException e) {
            System.err.println("File reading interrupted: " + e.getMessage());
            return;
        }
        
        // Get job queue from file reader
        if (fileReaderThread.getJobQueue().isEmpty()) {
            System.err.println("No jobs found in the input file");
            return;
        }
        
        // Choose scheduling algorithm
        System.out.println("\nSelect scheduling algorithm:");
        System.out.println("1. First-Come-First-Serve (FCFS)");
        System.out.println("2. Round-Robin (RR) with quantum = 7ms");
        System.out.println("3. Priority Scheduling");
        System.out.println("4. Compare all algorithms");
        System.out.print("Enter your choice (1-4): ");
        
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        
        switch (choice) {
            case 1:
                runFCFS(memoryManager, fileReaderThread);
                break;
            case 2:
                runRR(memoryManager, fileReaderThread);
                break;
            case 3:
                runPriority(memoryManager, fileReaderThread);
                break;
            case 4:
                compareAlgorithms(memoryManager, fileReaderThread);
                break;
            default:
                System.out.println("Invalid choice. Exiting.");
        }
        
        scanner.close();
    }
    
    

	/**
     * Run FCFS scheduling algorithm
     */
    private static void runFCFS(MemoryManager memoryManager, FileReaderThread fileReaderThread) {
        FCFSScheduler scheduler = new FCFSScheduler(memoryManager);
        
        // Start job loader thread
        JobLoaderThread jobLoaderThread = new JobLoaderThread(
            fileReaderThread.getJobQueue(), scheduler, memoryManager);
        jobLoaderThread.start();
        
        try {
            // Give some time for jobs to be loaded
            Thread.sleep(500);
            
            // Stop job loader thread
            jobLoaderThread.stopLoading();
            jobLoaderThread.join();
            
            // Run scheduler
            scheduler.schedule();
            
            // Display results
            System.out.println("\nFCFS Results:");
            System.out.println(scheduler.generateGanttChart());
            
            Map<String, Object> stats = scheduler.getStatistics();
            double avgWaiting = (double) stats.get("averageWaitingTime");
            double avgTurnaround = (double) stats.get("averageTurnaroundTime");
            
            System.out.println("Average Waiting Time: " + String.format("%.2f", avgWaiting) + " ms");
            System.out.println("Average Turnaround Time: " + String.format("%.2f", avgTurnaround) + " ms");
            
        } catch (InterruptedException e) {
            System.err.println("Job loading interrupted: " + e.getMessage());
        }
    }
    
    /**
     * Run Round Robin scheduling algorithm
     */
    private static void runRR(MemoryManager memoryManager, FileReaderThread fileReaderThread) {
        RRScheduler scheduler = new RRScheduler(memoryManager);
        
        // Start job loader thread
        JobLoaderThread jobLoaderThread = new JobLoaderThread(
            fileReaderThread.getJobQueue(), scheduler, memoryManager);
        jobLoaderThread.start();
        
        try {
            // Give some time for jobs to be loaded
            Thread.sleep(500);
            
            // Stop job loader thread
            jobLoaderThread.stopLoading();
            jobLoaderThread.join();
            
            // Run scheduler
            scheduler.schedule();
            
            // Display results
            System.out.println("\nRound Robin Results:");
            System.out.println(scheduler.generateGanttChart());
            
            Map<String, Object> stats = scheduler.getStatistics();
            double avgWaiting = (double) stats.get("averageWaitingTime");
            double avgTurnaround = (double) stats.get("averageTurnaroundTime");
            
            System.out.println("Average Waiting Time: " + String.format("%.2f", avgWaiting) + " ms");
            System.out.println("Average Turnaround Time: " + String.format("%.2f", avgTurnaround) + " ms");
            
        } catch (InterruptedException e) {
            System.err.println("Job loading interrupted: " + e.getMessage());
        }
    }
    
    /**
     * Run Priority scheduling algorithm
     */
    private static void runPriority(MemoryManager memoryManager, FileReaderThread fileReaderThread) {
        PriorityScheduler scheduler = new PriorityScheduler(memoryManager);
        
        // Start job loader thread
        JobLoaderThread jobLoaderThread = new JobLoaderThread(
            fileReaderThread.getJobQueue(), scheduler, memoryManager);
        jobLoaderThread.start();
        
        try {
            // Give some time for jobs to be loaded
            Thread.sleep(500);
        }
        catch (InterruptedException e) {
            System.err.println("Job loading interrupted: " + e.getMessage());
        }
        
    }
}

            
    
