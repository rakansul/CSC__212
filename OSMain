package CSC_227;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * Main application class for the OS Scheduler Simulation 
 */ 
public class OSMain {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("===============================================");
        System.out.println("          Operating System Scheduler           ");
        System.out.println("===============================================");
        
        // Ask for the file path
        System.out.print("Enter the path to job.txt (or press Enter to use the default path): ");
        String filename = scanner.nextLine().trim();
        if (filename.isEmpty()) {
            filename = "C:/Users/USER/Desktop/CSC_227/src/CSC_227/job.txt"; // Default file path
            System.out.println("No file path provided. Using default: " + filename);
        }

        // Instantiate the FileReaderThread with the chosen file path
        FileReaderThread fileReaderThread = new FileReaderThread(filename);
        fileReaderThread.start();
        
        // Wait for the file to be fully read before continuing
        // The reason for it is to wait tell the file been read then go and display the menu 
        try {
            fileReaderThread.join();
            System.out.println("File reading completed successfully.");
        } catch (InterruptedException e) {
            System.err.println("File reading interrupted: " + e.getMessage());
            return; // Exit the program if file reading fails
        }

        // Display the menu
        int choice = -1;
        while (choice != 0) {
        	System.out.println("===================================================");
            System.out.println("\nMenu:");
            System.out.println("1. Run First-Come-First-Serve (FCFS) Scheduler");
            System.out.println("2. Run Round-Robin (RR) Scheduler");
            System.out.println("3. Run Priority Scheduler");
            System.out.println("4. Compare All Scheduling Algorithms"); 
            System.out.println("0. Exit");
            System.out.print("Enter your choice: "); 
            
            // Validate input
            if (scanner.hasNextInt()) {
                choice = scanner.nextInt();
            } else {
                System.out.println("Invalid input. Please enter a number from 0 to 4.");
                scanner.next(); // Clear invalid input
                continue;
            } 

            // Handle user choice
            switch (choice) {
                case 1:
                    runFCFS(fileReaderThread);
                    break;
                case 2:
                    runRR(fileReaderThread);
                    break;
                case 3:
                    runPriority(fileReaderThread);
                    break;
                case 4:
                    compareAlgorithms(fileReaderThread);
                    break;
                case 0:
                    System.out.println("Exiting the program. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please select a valid option.");
                    break;
            }
        }

        scanner.close();
    }
/////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Run the First-Come-First-Serve (FCFS) Scheduler
     */
    private static void runFCFS(FileReaderThread fileReaderThread) {
    	System.out.println("===================================================");
        System.out.println("Running First-Come-First-Serve (FCFS) Scheduler...");
        Scheduler scheduler = new FCFSScheduler(new MemoryManager());
        runScheduler(scheduler, fileReaderThread);
    }

    /**
     * Run the Round-Robin (RR) Scheduler
     */
    private static void runRR(FileReaderThread fileReaderThread) {
    	System.out.println("===================================================");
        System.out.println("Running Round-Robin (RR) Scheduler...");
        Scheduler scheduler = new RRScheduler(new MemoryManager());
        runScheduler(scheduler, fileReaderThread);
    }

    /**
     * Run the Priority Scheduler
     */
    private static void runPriority(FileReaderThread fileReaderThread) {
    	System.out.println("===================================================");
        System.out.println("Running Priority Scheduler...");
        Scheduler scheduler = new PriorityScheduler(new MemoryManager());
        runScheduler(scheduler, fileReaderThread);
    }

    // Compare All Scheduling Algorithms
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private static void compareAlgorithms(FileReaderThread fileReaderThread) {
        System.out.println("Comparing all scheduling algorithms...");
     
        // Make a deep copy of the job queue for each scheduler
        List<PCB> originalJobQueue = new ArrayList<>(fileReaderThread.getJobQueue());
        
        runFCFS(fileReaderThread);
        
        Scheduler[] schedulers = {
            new RRScheduler(new MemoryManager()),new PriorityScheduler(new MemoryManager())
            }
        ;
        
        
        for (Scheduler scheduler : schedulers) {
        System.out.println("\nRunning " + scheduler.getClass().getSimpleName());
        
        // Reload the job queue for each scheduler
        fileReaderThread.setJobQueue(new ConcurrentLinkedQueue<>(originalJobQueue));
        
        // Run the scheduler 
        runScheduler(scheduler, fileReaderThread);
        
        }
    }
