package CSC_227;

import java.util.Scanner;

/**
 * Main application class for the OS Scheduler Simulation 
 */ 
public class OSMain {
    public static void main(String[] args) {
    	
    	String filename = "C:/Users/USER/Desktop/CSC_227/src/CSC_227/job.txt"; // Default file path
        Scanner scanner = new Scanner(System.in);

        System.out.println("===============================================");
        System.out.println("          Operating System Scheduler           ");
        System.out.println("===============================================");
        
        

        // Display the menu
        int choice = -1;
        while (choice != 0) {
        	System.out.println("===================================================");
            System.out.println("\nMenu:");
            System.out.println("1. Run First-Come-First-Serve (FCFS) Scheduler");
            System.out.println("2. Run Round-Robin (RR) Scheduler");
            System.out.println("3. Run Priority Scheduler");
            System.out.println("4. Compare All Scheduling Algorithms"); 
            System.out.println("0. Exit");
            System.out.print("Enter your choice: "); 
            
            // Validate input
            if (scanner.hasNextInt()) { 
                choice = scanner.nextInt();
            } else {
                System.out.println("Invalid input. Please enter a number from 0 to 4.");
                scanner.next(); // Clear invalid input
                continue;
            } 

            // Handle user choice
            switch (choice) {
                case 1:
                    // Instantiate the FileReaderThread with the chosen file path
                    FileReaderThread fileReaderThread1 = new FileReaderThread(filename);
                    fileReaderThread1.start();
                    
                    // Wait for the file to be fully read before continuing
                    // The reason for it is to wait tell the file been read then go and display the menu 
                    try {
                        fileReaderThread1.join();
                        System.out.println("File reading completed successfully.");
                    } catch (InterruptedException e) {
                        System.err.println("File reading interrupted: " + e.getMessage());
                        return; // Exit the program if file reading fails
                    }
                    runFCFS(fileReaderThread1);
                    break;
                case 2:
                    // Instantiate the FileReaderThread with the chosen file path
                    FileReaderThread fileReaderThread2 = new FileReaderThread(filename);
                    fileReaderThread2.start();
                    
                    // Wait for the file to be fully read before continuing
                    // The reason for it is to wait tell the file been read then go and display the menu 
                    try {
                        fileReaderThread2.join();
                        System.out.println("File reading completed successfully.");
                    } catch (InterruptedException e) {
                        System.err.println("File reading interrupted: " + e.getMessage());
                        return; // Exit the program if file reading fails
                    }
                    runRR(fileReaderThread2);
                    break;
                case 3:
                	
                    // Instantiate the FileReaderThread with the chosen file path
                    FileReaderThread fileReaderThread3 = new FileReaderThread(filename);
                    fileReaderThread3.start();
                    
                    // Wait for the file to be fully read before continuing
                    // The reason for it is to wait tell the file been read then go and display the menu 
                    try {
                        fileReaderThread3.join();
                        System.out.println("File reading completed successfully.");
                    } catch (InterruptedException e) {
                        System.err.println("File reading interrupted: " + e.getMessage());
                        return; // Exit the program if file reading fails
                    }
                    runPriority(fileReaderThread3);
                    break;
                case 4:
                    compareAlgorithms(filename);
                    break;
                case 0:
                    System.out.println("Exiting the program. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please select a valid option.");
                    break;
            }
        }

        scanner.close();
    }
    
    private static void runFCFS(FileReaderThread fileReaderThread) {
    	System.out.println("===================================================");
        System.out.println("Running First-Come-First-Serve (FCFS) Scheduler...");
        Scheduler scheduler = new FCFSScheduler(new MemoryManager());
        runScheduler(scheduler, fileReaderThread);
    }
    
    private static void runRR(FileReaderThread fileReaderThread) {
    	System.out.println("===================================================");
        System.out.println("Running Round-Robin (RR) Scheduler...");
        Scheduler scheduler = new RRScheduler(new MemoryManager());
        runScheduler(scheduler, fileReaderThread);
    }

    private static void runPriority(FileReaderThread fileReaderThread) {
    	System.out.println("===================================================");
        System.out.println("Running Priority Scheduler...");
        Scheduler scheduler = new PriorityScheduler(new MemoryManager());
        runScheduler(scheduler, fileReaderThread);
    }
    

    private static void compareAlgorithms(String filename) {
    	
        // Instantiate the FileReaderThread with the chosen file path
        FileReaderThread fileReaderThread1 = new FileReaderThread(filename);
        fileReaderThread1.start();
        
        // Wait for the file to be fully read before continuing
        // The reason for it is to wait tell the file been read then go and display the menu 
        try {
            fileReaderThread1.join();
            System.out.println("File reading completed successfully.");
        } catch (InterruptedException e) {
            System.err.println("File reading interrupted: " + e.getMessage());
            return; // Exit the program if file reading fails
        }
        runFCFS(fileReaderThread1);
        
        
        // Instantiate the FileReaderThread with the chosen file path
        FileReaderThread fileReaderThread2 = new FileReaderThread(filename);
        fileReaderThread2.start();
        
        // Wait for the file to be fully read before continuing
        // The reason for it is to wait tell the file been read then go and display the menu 
        try {
            fileReaderThread2.join();
            System.out.println("File reading completed successfully.");
        } catch (InterruptedException e) {
            System.err.println("File reading interrupted: " + e.getMessage());
            return; // Exit the program if file reading fails
        }
        runRR(fileReaderThread2);
        // Instantiate the FileReaderThread with the chosen file path
        FileReaderThread fileReaderThread3 = new FileReaderThread(filename);
        fileReaderThread3.start();
        
        // Wait for the file to be fully read before continuing
        // The reason for it is to wait tell the file been read then go and display the menu 
        try {
            fileReaderThread3.join();
            System.out.println("File reading completed successfully.");
        } catch (InterruptedException e) {
            System.err.println("File reading interrupted: " + e.getMessage());
            return; // Exit the program if file reading fails
        }
        
        runPriority(fileReaderThread3);
        
    		
    		
    	}
    
    
    private static void runScheduler(Scheduler scheduler, FileReaderThread fileReaderThread) {
    	MemoryManager memoryManager = scheduler.getMemoryManager();
        JobLoaderThread jobLoaderThread = new JobLoaderThread(
        fileReaderThread.getJobQueue(), scheduler, memoryManager);
        jobLoaderThread.start();
        try {
            Thread.sleep(500); // Simulate processing time
            jobLoaderThread.stopLoading();
            jobLoaderThread.join();
            scheduler.schedule();
            displayResults(scheduler);
        } catch (InterruptedException e) {
            System.err.println("Job loading interrupted: " + e.getMessage());
        }
    }

    
    private static void displayResults(Scheduler scheduler) {
        System.out.println("\n" + scheduler.getClass().getSimpleName() + " Results:");
        System.out.println(scheduler.generateGanttChart());
        var stats = scheduler.getStatistics();
        System.out.printf("Average Waiting Time: %.2f ms%n", stats.get("averageWaitingTime"));
        System.out.printf("Average Turnaround Time: %.2f ms%n", stats.get("averageTurnaroundTime"));
    }
}

